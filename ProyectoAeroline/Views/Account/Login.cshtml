@model ProyectoAeroline.LoginViewModel
@{
    ViewData["Title"] = "Login";
    Layout = "~/Views/Shared/_AuthLayout.cshtml";
}

<!-- Asegúrate que EXISTE /wwwroot/css/login.modern.css -->
<link rel="stylesheet" href="~/css/login.modern.css" asp-append-version="true" />

<div class="auth-shell">
    <div class="lg2-wrap">

        <aside class="lg2-left">
            <div class="frame-wrap" id="frameWrap" style="--fit:0.76; --stage-max:clamp(560px,48vw,760px);">
                <img id="frame-seq" src="~/img/frames/1.png" alt="frame animation" />
            </div>
        </aside>

        <!-- DERECHA -->
        <main class="lg2-right">
            <section class="lg2-card">
                <div class="lg2-badge">✚</div>
                <h1 class="lg2-title">Welcome back!</h1>
                <p class="lg2-sub">Please enter your details</p>

                <form id="loginForm" asp-controller="Account" asp-action="Login" method="post">
                    @Html.AntiForgeryToken()

                    <div class="lg2-field">
                        <label for="Email">Email</label>
                        <input asp-for="Email" id="Email" type="email" autocomplete="username" required />
                        <span class="lg2-underline"></span>
                    </div>

                    <div class="lg2-field">
                        <label for="Password">Password</label>
                        <input asp-for="Password" id="Password" type="password" autocomplete="current-password" required />
                        <button type="button" id="btnTogglePwd" class="lg2-eye">👁️</button>
                        <span class="lg2-underline"></span>
                    </div>

                    <div class="lg2-row">
                        <label class="lg2-check">
                            <input asp-for="RememberMe" /> Remember for 30 days
                        </label>
                        <a class="lg2-link" href="#">Forgot password?</a>
                    </div>

                    <button type="submit" class="lg2-btn lg2-btn-primary">Log In</button>

                    <button type="button" class="lg2-btn lg2-btn-google">
                        <img src="https://www.gstatic.com/images/branding/product/1x/gsa_64dp.png" alt="" class="gicon" />
                        Log in with Google
                    </button>
                </form>

                <p style="text-align:center; margin-top:18px; color:#7b8190;">
                    Don’t have an account? <a href="#" class="lg2-link">Sign Up</a>
                </p>
            </section>
        </main>

    </div>
</div>

@section Scripts {
    <script>
        (() => {
          const img   = document.getElementById("frame-seq");
          const wrap  = document.getElementById("frameWrap");
          const email = document.getElementById("Email");
          const pwd   = document.getElementById("Password");
          const form  = document.getElementById("loginForm");
          const btnEye = document.getElementById("btnTogglePwd");
          if (!img) return;

          // ==== CONFIG ====
          const PATH = "/img/frames/";
          const FPS_IDLE  = 8;
          const FPS_FOCUS = 10;
          const FPS_ERROR = 10;
          const FPS_EYE   = 10;
          const IDLE_MIN  = 1,  IDLE_MAX  = 7;
          const FOC_MIN   = 56, FOC_MAX   = 97;
          const ERR_MIN   = 36, ERR_MAX   = 56;

          // ==== (SOLO CAMBIO PEDIDO) CONFIG OJO ====
          const EYE_START = 35;   // inicia en 35
          const EYE_MIN   = 15;   // baja hasta 15
          const EYE_LIMIT = 25;   // rebota solo hasta 25

          // ==== HELPERS ====
          function setAspectFromImage(el){
            const w = el.naturalWidth || el.width;
            const h = el.naturalHeight || el.height;
            if (wrap && w && h) wrap.style.setProperty('--ar', `${w} / ${h}`);
          }

          function pingPong(min, max){
            const up = [];
            for (let i=min; i<=max; i++) up.push(i);
            for (let i=max-1; i>=min+1; i--) up.push(i);
            return up;
          }

          function pingPongCustom(min, max, limit){
            const seq = [];
            for (let i=max; i>=min; i--) seq.push(i);
            for (let i=min+1; i<=limit; i++) seq.push(i);
            for (let i=limit-1; i>=min+1; i--) seq.push(i);
            return seq;
          }

          function preload(frames){
            frames.forEach(n => { const p = new Image(); p.src = `${PATH}${n}.png`; });
          }

          // ==== VARIABLES DE CONTROL ====
          let loopTimer = null;
          let frames = [];
          let idx = 0;
          let currentMode = "idle";
          let isOneShot = false;
          let isEyeLoop = false;

          // ==== FUNCIONES BASE ====
          function stopLoop(){
            if (loopTimer){ clearInterval(loopTimer); loopTimer = null; }
          }

          function startLoop(newFrames, fps, mode){
            if (isOneShot || isEyeLoop) return; // no interrumpir el bucle del ojo ni el error
            if (currentMode === mode && loopTimer) return;
            currentMode = mode;

            stopLoop();
            frames = newFrames.slice();
            idx = 0;

            img.addEventListener('load', function onFirstLoad(){
              setAspectFromImage(img);
              img.removeEventListener('load', onFirstLoad);
            }, { once:true });
            img.src = `${PATH}${frames[idx]}.png`;

            loopTimer = setInterval(() => {
              idx = (idx + 1) % frames.length;
              img.src = `${PATH}${frames[idx]}.png`;
            }, 1000 / fps);
          }

          // ==== ANIMACIÓN DE ERROR ====
          function playErrorOneShot(){
            if (isOneShot) return;
            isOneShot = true;
            stopLoop();

            const seq = [];
            for (let i = ERR_MAX; i >= ERR_MIN; i--) seq.push(i);
            for (let i = ERR_MIN + 1; i <= ERR_MAX; i++) seq.push(i);
            preload(seq);

            let k = 0;
            const end = seq.length;
            img.src = `${PATH}${seq[k]}.png`;

            const t = setInterval(() => {
              k++;
              if (k >= end){
                clearInterval(t);
                isOneShot = false;
                if (email.matches(":focus") || pwd.matches(":focus")){
                  startLoop(focusSeq, FPS_FOCUS, "focus");
                } else {
                  startLoop(idleSeq, FPS_IDLE, "idle");
                }
                return;
              }
              img.src = `${PATH}${seq[k]}.png`;
            }, 1000 / FPS_ERROR);
          }

          // ==== (SOLO CAMBIO PEDIDO) ANIMACIÓN DEL OJO ====
          function playEyeLoop(){
            if (isEyeLoop) return;
            isEyeLoop = true;
            stopLoop();

            // 1) primera pasada 35 → 15 (una sola vez)
            const firstSeq = [];
            for (let i = EYE_START; i >= EYE_MIN; i--) firstSeq.push(i);

            // 2) bucle continuo 15 ↔ 25 (sin volver a 35)
            const bounceSeq = [];
            for (let i = EYE_MIN; i <= EYE_LIMIT; i++) bounceSeq.push(i);
            for (let i = EYE_LIMIT - 1; i >= EYE_MIN + 1; i--) bounceSeq.push(i);

            preload(firstSeq);
            preload(bounceSeq);

            const playSeqOnce = (seq, fps, done) => {
              let k = 0;
              img.src = `${PATH}${seq[k]}.png`;
              const t = setInterval(() => {
                k++;
                if (k >= seq.length){
                  clearInterval(t);
                  done && done();
                  return;
                }
                img.src = `${PATH}${seq[k]}.png`;
              }, 1000 / fps);
            };

            playSeqOnce(firstSeq, FPS_EYE, () => {
              let j = 0;
              loopTimer = setInterval(() => {
                j = (j + 1) % bounceSeq.length;
                img.src = `${PATH}${bounceSeq[j]}.png`;
              }, 1000 / FPS_EYE);
            });
          }

          function playEyeCloseTransition(){
            if (!isEyeLoop) return;
            isEyeLoop = false;
            stopLoop();

            // Calcula desde la imagen actual hacia 12
            const currentNumber = parseInt(img.src.match(/(\d+)\.png$/)?.[1] || 16);
            const seq = [];
            for (let i = currentNumber; i >= 12; i--) seq.push(i);
            preload(seq);

            let k = 0;
            const end = seq.length;
            img.src = `${PATH}${seq[k]}.png`;

            const t = setInterval(() => {
              k++;
              if (k >= end){
                clearInterval(t);
                // vuelve al estado normal (focus o idle)
                if (email.matches(":focus") || pwd.matches(":focus")){
                  startLoop(focusSeq, FPS_FOCUS, "focus");
                } else {
                  startLoop(idleSeq, FPS_IDLE, "idle");
                }
                return;
              }
              img.src = `${PATH}${seq[k]}.png`;
            }, 1000 / FPS_EYE);
          }

          // ==== SECUENCIAS ====
          const idleSeq  = pingPong(IDLE_MIN, IDLE_MAX);
          const focusSeq = pingPong(FOC_MIN, FOC_MAX);
          preload(idleSeq);
          preload(focusSeq);

          // Arranque inicial
          startLoop(idleSeq, FPS_IDLE, "idle");

          // ==== FOCUS Y BLUR ====
          function onFocus() {
            startLoop(focusSeq, FPS_FOCUS, "focus");
          }

          function onBlur() {
            setTimeout(() => {
              if (!email.matches(":focus") && !pwd.matches(":focus")) {
                startLoop(idleSeq, FPS_IDLE, "idle");
              }
            }, 100);
          }

          email?.addEventListener('focus', onFocus);
          pwd?.addEventListener('focus', onFocus);
          email?.addEventListener('blur', onBlur);
          pwd?.addEventListener('blur', onBlur);

          // ==== ERRORES ====
          [email, pwd].forEach(el => el?.addEventListener('invalid', () => {
            playErrorOneShot();
          }, true));

          form?.addEventListener('submit', (e) => {
            if (!form.checkValidity()){
              e.preventDefault();
              playErrorOneShot();
            }
          });

          // ==== MOSTRAR / OCULTAR CONTRASEÑA ====
          if (btnEye && pwd) {
            btnEye.addEventListener("click", () => {
              const isHidden = pwd.type === "password";
              pwd.type = isHidden ? "text" : "password";
              btnEye.textContent = isHidden ? "🙈" : "👁️";

              // Activar ojo → bucle del ojo (35→15 y luego 15↔25)
              if (isHidden) {
                playEyeLoop();
              }
              // Desactivar ojo → transición hacia 12
              else {
                playEyeCloseTransition();
              }
            });
          }

        })();
    </script>
}
