@model ProyectoAeroline.LoginViewModel
@{
    ViewData["Title"] = "Login";
    Layout = "~/Views/Shared/_AuthLayout.cshtml";
}

<link rel="stylesheet" href="~/css/login.modern.css" asp-append-version="true" />

<div class="auth-shell">
    <div class="lg2-wrap">

        <aside class="lg2-left">
            <div class="frame-wrap" id="frameWrap" style="--fit:0.76; --stage-max:clamp(560px,48vw,760px);">
                <img id="frame-seq" src="~/img/frames/1.png" alt="frame animation" />
            </div>
        </aside>

        <main class="lg2-right">
            <section class="lg2-card">
                <div class="lg2-badge">✚</div>
                <h1 class="lg2-title">Bienvenido!</h1>
                <p class="lg2-sub">Por favor ingrese sus datos</p>

                <form id="loginForm" asp-controller="Account" asp-action="Login" method="post">
                    @Html.AntiForgeryToken()

                    <!-- ===== ÚNICA ALERTA (no usamos asp-validation-summary para evitar duplicado) ===== -->
                    @if ((ViewData["LoginError"] as string) is string le && !string.IsNullOrWhiteSpace(le))
                    {
                        <div id="server-alert" class="lg2-alert" role="alert">@le</div>
                    }
                    <input type="hidden" id="ServerLoginError" value="@(ViewData["LoginError"] ?? "")" />

                    <div class="lg2-field">
                        <label for="Email">Email</label>
                        <input asp-for="Email" id="Email" type="email" autocomplete="username" required />
                        <span class="lg2-underline"></span>
                        <span asp-validation-for="Email" class="field-error"></span>
                    </div>

                    <div class="lg2-field">
                        <label for="Password">Contraseña</label>
                        <input asp-for="Password" id="Password" type="password" autocomplete="current-password" required />
                        <button type="button" id="btnTogglePwd" class="lg2-eye">👁️</button>
                        <span class="lg2-underline"></span>
                        <span asp-validation-for="Password" class="field-error"></span>
                    </div>

                    <div class="lg2-row">
                        <label class="lg2-check">
                            <input asp-for="RememberMe" /> Recordar
                        </label>
                        <a class="lg2-link" href="#">¿Olvidó su contraseña?</a>
                    </div>

                    <button type="submit" class="lg2-btn lg2-btn-primary">Log In</button>

                    <button type="button" class="lg2-btn lg2-btn-google">
                        <img src="https://www.gstatic.com/images/branding/product/1x/gsa_64dp.png" alt="" class="gicon" />
                        Ingresar con Google
                    </button>
                </form>

                <p style="text-align:center; margin-top:18px; color:#7b8190;">
                    ¿No tiene una cuenta? <a href="#" class="lg2-link">Registrar</a>
                </p>
            </section>
        </main>

    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        (() => {
          const img   = document.getElementById("frame-seq");
          const wrap  = document.getElementById("frameWrap");
          const email = document.getElementById("Email");
          const pwd   = document.getElementById("Password");
          const form  = document.getElementById("loginForm");
          const btnEye = document.getElementById("btnTogglePwd");
          if (!img) return;

          const PATH = "/img/frames/";
          const FPS_IDLE  = 8;
          const FPS_FOCUS = 10;
          const FPS_ERROR = 10;
          const FPS_EYE   = 10;
          const IDLE_MIN  = 1,  IDLE_MAX  = 7;
          const FOC_MIN   = 56, FOC_MAX   = 97;
          const ERR_MIN   = 36, ERR_MAX   = 56;

          const EYE_START = 35, EYE_MIN = 15, EYE_LIMIT = 25;

          function setAspectFromImage(el){
            const w = el.naturalWidth || el.width;
            const h = el.naturalHeight || el.height;
            if (wrap && w && h) wrap.style.setProperty('--ar', `${w} / ${h}`);
          }
          function pingPong(min, max){
            const up = [];
            for (let i=min; i<=max; i++) up.push(i);
            for (let i=max-1; i>=min+1; i--) up.push(i);
            return up;
          }
          function preload(frames){
            frames.forEach(n => { const p = new Image(); p.src = `${PATH}${n}.png`; });
          }

          let loopTimer = null, frames = [], idx = 0, currentMode = "idle", isOneShot = false, isEyeLoop = false;

          function stopLoop(){ if (loopTimer){ clearInterval(loopTimer); loopTimer = null; } }
          function startLoop(newFrames, fps, mode){
            if (isOneShot || isEyeLoop) return;
            if (currentMode === mode && loopTimer) return;
            currentMode = mode;
            stopLoop(); frames = newFrames.slice(); idx = 0;

            img.addEventListener('load', function onFirstLoad(){
              setAspectFromImage(img); img.removeEventListener('load', onFirstLoad);
            }, { once:true });
            img.src = `${PATH}${frames[idx]}.png`;

            loopTimer = setInterval(() => {
              idx = (idx + 1) % frames.length;
              img.src = `${PATH}${frames[idx]}.png`;
            }, 1000 / fps);
          }

          function playErrorOneShot(){
            if (isOneShot) return; isOneShot = true; stopLoop();
            const seq = []; for (let i = ERR_MAX; i >= ERR_MIN; i--) seq.push(i);
            for (let i = ERR_MIN + 1; i <= ERR_MAX; i++) seq.push(i);
            preload(seq);
            let k = 0; img.src = `${PATH}${seq[k]}.png`;
            const t = setInterval(() => {
              k++;
              if (k >= seq.length){
                clearInterval(t); isOneShot = false;
                if (email.matches(":focus") || pwd.matches(":focus")) startLoop(focusSeq, FPS_FOCUS, "focus");
                else startLoop(idleSeq, FPS_IDLE, "idle");
                return;
              }
              img.src = `${PATH}${seq[k]}.png`;
            }, 1000 / FPS_ERROR);
          }

          function playEyeLoop(){
            if (isEyeLoop) return; isEyeLoop = true; stopLoop();
            const firstSeq = []; for (let i = EYE_START; i >= EYE_MIN; i--) firstSeq.push(i);
            const bounceSeq = []; for (let i = EYE_MIN; i <= EYE_LIMIT; i++) bounceSeq.push(i);
            for (let i = EYE_LIMIT - 1; i >= EYE_MIN + 1; i--) bounceSeq.push(i);
            preload(firstSeq); preload(bounceSeq);
            const playSeqOnce = (seq, fps, done) => {
              let k = 0; img.src = `${PATH}${seq[k]}.png`;
              const t = setInterval(() => {
                k++; if (k >= seq.length){ clearInterval(t); done && done(); return; }
                img.src = `${PATH}${seq[k]}.png`;
              }, 1000 / fps);
            };
            playSeqOnce(firstSeq, FPS_EYE, () => {
              let j = 0;
              loopTimer = setInterval(() => {
                j = (j + 1) % bounceSeq.length;
                img.src = `${PATH}${bounceSeq[j]}.png`;
              }, 1000 / FPS_EYE);
            });
          }
          function playEyeCloseTransition(){
            if (!isEyeLoop) return; isEyeLoop = false; stopLoop();
            const currentNumber = parseInt(img.src.match(/(\d+)\.png$/)?.[1] || 16);
            const seq = []; for (let i = currentNumber; i >= 12; i--) seq.push(i);
            preload(seq); let k = 0; img.src = `${PATH}${seq[k]}.png`;
            const t = setInterval(() => {
              k++; if (k >= seq.length){
                clearInterval(t);
                if (email.matches(":focus") || pwd.matches(":focus")) startLoop(focusSeq, FPS_FOCUS, "focus");
                else startLoop(idleSeq, FPS_IDLE, "idle"); return;
              }
              img.src = `${PATH}${seq[k]}.png`;
            }, 1000 / FPS_EYE);
          }

          const idleSeq  = pingPong(IDLE_MIN, IDLE_MAX);
          const focusSeq = pingPong(FOC_MIN, FOC_MAX);
          preload(idleSeq); preload(focusSeq);
          startLoop(idleSeq, FPS_IDLE, "idle");

          function onFocus(){ startLoop(focusSeq, FPS_FOCUS, "focus"); }
          function onBlur(){ setTimeout(() => {
              if (!email.matches(":focus") && !pwd.matches(":focus")) startLoop(idleSeq, FPS_IDLE, "idle");
          }, 100); }
          email?.addEventListener('focus', onFocus);
          pwd?.addEventListener('focus', onFocus);
          email?.addEventListener('blur', onBlur);
          pwd?.addEventListener('blur', onBlur);

          [email, pwd].forEach(el => el?.addEventListener('invalid', () => { playErrorOneShot(); }, true));

          form?.addEventListener('submit', (e) => {
            if (!form.checkValidity()){
              e.preventDefault();
              playErrorOneShot();
            }
          });

          if (btnEye && pwd) {
            btnEye.addEventListener("click", () => {
              const isHidden = pwd.type === "password";
              pwd.type = isHidden ? "text" : "password";
              btnEye.textContent = isHidden ? "🙈" : "👁️";
              if (isHidden) playEyeLoop(); else playEyeCloseTransition();
            });
          }

          // Si el servidor marcó error -> animación y autodesaparición de alerta
          const serverErr = document.getElementById("ServerLoginError")?.value?.trim();
          const alertBox = document.getElementById("server-alert");
          if (serverErr) {
            document.getElementById("loginForm")?.scrollIntoView({ behavior: "smooth", block: "center" });
            if (typeof playErrorOneShot === "function") playErrorOneShot();

            // Auto-ocultar a los 5s (con fade-out)
            setTimeout(() => {
              if (!alertBox) return;
              alertBox.style.transition = "opacity .4s ease";
              alertBox.style.opacity = "0";
              setTimeout(() => alertBox.remove(), 400);
            }, 5000);
          }
        })();
    </script>
}
<script>
    (function () {
      // Evita navegar con Adelante/Atrás dentro del login (permanece en login)
      history.pushState(null, "", location.href);
      window.addEventListener("popstate", function () {
        history.pushState(null, "", location.href);
      });

      // Si el navegador intenta traer una versión en memoria, fuerza recarga
      window.addEventListener("pageshow", function (ev) {
        if (ev.persisted) location.reload();
      });
    })();
</script>
